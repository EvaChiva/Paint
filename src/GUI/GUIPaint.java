/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
//The name of the package were this class belongs

package GUI;

///THe packages imported for several elements used
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import logic.*;

/**
 *@date 01/may/2019
 * @author Eva Beltran, Emilio Aguilera, Viviana Due√±as
 * Description:This class has the main method and represents the graphic user interface.
 * Here there are the components that are seen by the window and the logic is added to the component that it's related with.
 */
public class GUIPaint extends javax.swing.JFrame {

    Eraser eraser = new Eraser();
    //There are arraylists of the elements used to paint like the pen. The are named as containers depeding on the element, for example for pen, penContainer
    private List<Square> sqrContainer = new ArrayList();
    private List<Circle> circContainer = new ArrayList();
    private List<Line> lineContainer = new ArrayList();
    private List<Pen> penContainer = new ArrayList();
    private List<Eraser> eraserContainer = new ArrayList();
    //This one will be saving all the user movements and applications on panel
    private List<Tool> toolContainer = new ArrayList();
    
    
    private Graphics2D g2;
    
    private int circleCount = 0;
    private int sqrCount = 0;
    private int lineCount = 0;
    private int penCount = 0;
    private int eraserCount = 0;
    //Attribute image
    private BufferedImage image;
    
    //There are the boolean values used to know the behavior of the canvas when the user picks a tool
    private Boolean penClicked = false;
    private Boolean eraserClicked = false;
    private Boolean lineClicked = false;
    private Boolean circleClicked = false;
    private Boolean squareClicked = false;
   
    //There are the attributes for getting the location of the mouse while drawing, there is coordinate x and y for the start and the end
    private int xStart;
    private int yStart;
    private int xEnd;
    private int yEnd;
    
   //Here is the color by default, black. 
    private Color color = Color.BLACK;
    //The name of the file the user gave to open it or save it 
    private String name;
    /**
     * Creates new form GUIPaint
     */
    public GUIPaint() {
        initComponents();
        //Here there are created new objects for each element: circle, square, line,pen and eraser. They are added to the arraylists named as containers
        circContainer.add(new Circle());
        sqrContainer.add(new Square());
        lineContainer.add(new Line());
        penContainer.add(new Pen());
        eraserContainer.add(new Eraser());
        
        //Here the graphics are obtained from the panel, if it's null
        if(g2 == null){
            g2 = (Graphics2D) canvas.getGraphics();
        }
        //Here there are given the basic set of rendering attributes to the graphics
        g2.setStroke(new BasicStroke(5));
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        ToolsPanel = new javax.swing.JPanel();
        squareButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        circleButton = new javax.swing.JButton();
        resettButton = new javax.swing.JButton();
        newButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        lineButton = new javax.swing.JButton();
        penButton = new javax.swing.JButton();
        eraserButton = new javax.swing.JButton();
        actualColorButton = new javax.swing.JButton();
        chooseColorButton = new javax.swing.JButton();
        openProject = new javax.swing.JButton();
        canvas = new javax.swing.JPanel();
        imageProof = new javax.swing.JLabel();
        BackgroundLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setOpaque(false);

        ToolsPanel.setOpaque(false);

        squareButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/conos_de_botones_PAINT/square.png"))); // NOI18N
        squareButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                squareButtonActionPerformed(evt);
            }
        });

        saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/conos_de_botones_PAINT/save.png"))); // NOI18N
        saveButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveButtonMouseClicked(evt);
            }
        });

        circleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/conos_de_botones_PAINT/circle.png"))); // NOI18N
        circleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                circleButtonActionPerformed(evt);
            }
        });

        resettButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/conos_de_botones_PAINT/reset.png"))); // NOI18N
        resettButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resettButtonMouseClicked(evt);
            }
        });

        newButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/conos_de_botones_PAINT/new.png"))); // NOI18N
        newButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newButtonActionPerformed(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/conos_de_botones_PAINT/Paint-Project.png"))); // NOI18N
        jLabel1.setText("PAINT PROJECT");

        lineButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/conos_de_botones_PAINT/linea.png"))); // NOI18N
        lineButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lineButtonMouseClicked(evt);
            }
        });
        lineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lineButtonActionPerformed(evt);
            }
        });

        penButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/conos_de_botones_PAINT/pen.png"))); // NOI18N
        penButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                penButtonActionPerformed(evt);
            }
        });

        eraserButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/conos_de_botones_PAINT/eraser.png"))); // NOI18N
        eraserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eraserButtonActionPerformed(evt);
            }
        });

        chooseColorButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/conos_de_botones_PAINT/color.png"))); // NOI18N
        chooseColorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseColorButtonActionPerformed(evt);
            }
        });

        openProject.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/conos_de_botones_PAINT/open.png"))); // NOI18N
        openProject.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                openProjectMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout ToolsPanelLayout = new javax.swing.GroupLayout(ToolsPanel);
        ToolsPanel.setLayout(ToolsPanelLayout);
        ToolsPanelLayout.setHorizontalGroup(
            ToolsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ToolsPanelLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(ToolsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(ToolsPanelLayout.createSequentialGroup()
                        .addComponent(openProject)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(eraserButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(circleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lineButton, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(newButton, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ToolsPanelLayout.createSequentialGroup()
                        .addComponent(chooseColorButton)
                        .addGap(18, 18, 18)
                        .addComponent(actualColorButton, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                        .addComponent(penButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(squareButton, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(resettButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        ToolsPanelLayout.setVerticalGroup(
            ToolsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ToolsPanelLayout.createSequentialGroup()
                .addGroup(ToolsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ToolsPanelLayout.createSequentialGroup()
                        .addGroup(ToolsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ToolsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(ToolsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(ToolsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(resettButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(squareButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(saveButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(penButton)
                                .addComponent(chooseColorButton, javax.swing.GroupLayout.Alignment.TRAILING))
                            .addGroup(ToolsPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(actualColorButton, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(ToolsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ToolsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(circleButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(newButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lineButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(eraserButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(openProject)))
                    .addGroup(ToolsPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        canvas.setBackground(new java.awt.Color(255, 255, 255));
        canvas.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                canvasMouseDragged(evt);
            }
        });
        canvas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                canvasMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                canvasMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout canvasLayout = new javax.swing.GroupLayout(canvas);
        canvas.setLayout(canvasLayout);
        canvasLayout.setHorizontalGroup(
            canvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 732, Short.MAX_VALUE)
            .addGroup(canvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(canvasLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(imageProof, javax.swing.GroupLayout.PREFERRED_SIZE, 720, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        canvasLayout.setVerticalGroup(
            canvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 487, Short.MAX_VALUE)
            .addGroup(canvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(canvasLayout.createSequentialGroup()
                    .addGap(1, 1, 1)
                    .addComponent(imageProof, javax.swing.GroupLayout.PREFERRED_SIZE, 473, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(canvas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ToolsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(88, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ToolsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(canvas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        BackgroundLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/conos_de_botones_PAINT/pizarron.jpg"))); // NOI18N
        BackgroundLabel.setText("jLabel2");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(BackgroundLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 930, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(BackgroundLabel)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
//This method works when the user stops clicking
    private void canvasMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvasMouseReleased
        //A observer to set graphics
        canvas.update(g2);
        
        //If the user was clicking the panel, here are conditions for each element the user could be clicking before the releasing
        if (penClicked) {
            //There is being added a pen object to the Tool arraylist (toolContainer)
            toolContainer.add(penContainer.get(penCount-1));
        } else if (eraserClicked) {
            //There is being added a eraser object to the Tool arraylist (toolContainer)
            toolContainer.add(eraserContainer.get(eraserCount-1));
        } else if(lineClicked) {
            //The x location is being obtained, when the user stops clicking
            xEnd = evt.getX();
            //The y location is being obtained, when the user stops clicking
            yEnd = evt.getY();
            (lineContainer.get(lineCount-1)).finishDrawing(xEnd, yEnd, g2);
            toolContainer.add(lineContainer.get(lineCount-1));
        }else if (circleClicked) {
            //The x location is being obtained, when the user stops clicking 
            //The substraction is done to get the another coordenates next to the start point
            xEnd = evt.getX() - xStart;
           //The y location is being obtained, when the user stops clicking
           //The substraction is done to get the another coordenates next to the start point
            yEnd = evt.getY() - yStart;
            //The method overrided, from Shape, by Circle it's being used to finishing the circle shape
            (circContainer.get(circleCount-1)).finishDrawing(xEnd, yEnd, g2);
            //There is being added a circle object to the Tool arraylist (toolContainer)
            toolContainer.add(circContainer.get(circleCount-1));
        }else if (squareClicked) {
            //The x location is being obtained, when the user stops clicking 
            //The substraction is done to get the another coordenates next to the start point
            xEnd = evt.getX() - xStart;
            //The y location is being obtained, when the user stops clicking
           //The substraction is done to get the another coordenates next to the start point
            yEnd = evt.getY() - yStart;
            //The method overrided, from Shape, by Square it's being used to finishing the square shape
            (sqrContainer.get(sqrCount-1)).finishDrawing(xEnd, yEnd, g2);
            //There is being added a square object to the Tool arraylist (toolContainer)
            toolContainer.add(sqrContainer.get(sqrCount-1));
        }
        //Depending on the condition and what's saved on toolContainer. The objects on tool container are drawed
        for (int i = 0; i < toolContainer.size(); i++) {
            (toolContainer.get(i)).drawAll(g2);
        }
       
    }//GEN-LAST:event_canvasMouseReleased

//This method works when the user is clicking the canvas
    private void canvasMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvasMousePressed
        //Depending on where the event takes place, here is being obtained the location of the mouse
        //there is coordinate x and y for the start and the end
        xStart = evt.getX();
        yStart = evt.getY();
        xEnd = evt.getX();
        yEnd = evt.getY();
        
        //Here are conditions for each element the user could be clicking
        if(penClicked) {
           //there is being assigned the actual color to the pen
            (penContainer.get(penCount)).setColor(color);
            //there is being added a Pen object
            penContainer.add(new Pen());
            //the counter is increasing
            penCount++;
            
            
        } else if(eraserClicked) {
            //There is being added an Eraser object
            eraserContainer.add(new Eraser());
            //the counter is increasing
            eraserCount++;
          
        } else if(lineClicked) {
           //there is being assigned the actual color to the line
            (lineContainer.get(lineCount)).setColor(color);
            //There is being added an Line object
            lineContainer.add(new Line());
            //the counter of the array is increasing
            lineCount++;
        }else if (circleClicked) {

           //there is being assigned a color to the circle
            (circContainer.get(circleCount)).setColor(color);
            //There is being added an Circle object
            circContainer.add(new Circle());
            //the counter of the array is increasing
            circleCount++;

        }else if (squareClicked) {
       
            //there is being assigned the actual color to the square
            (sqrContainer.get(sqrCount)).setColor(color);
            //There is being added an Square object
            sqrContainer.add(new Square());
            //the counter of the array is increasing
            sqrCount++;
        }

    }//GEN-LAST:event_canvasMousePressed
//This method works when the user drags the mouse
    private void canvasMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvasMouseDragged
        //A observer to set graphics
        canvas.update(g2);
         
        if(penClicked) {
        //Depending on where the event takes place, here is being obtained the location of the mouse
        //there is coordinate x and y for the start and the end
        xStart = evt.getX();
        yStart = evt.getY();
        xEnd = evt.getX();
        yEnd = evt.getY();
        
        //There is being used the method continueDrawing for completing the draw in between start-end
        (penContainer.get(penCount-1)).continueDrawing(xStart, yStart, xEnd, yEnd, g2);
        } else if(eraserClicked) {
         //Depending on where the event takes place, here is being obtained the location of the mouse
        //there is coordinate x and y for the start and the end
            xStart = evt.getX();
            yStart = evt.getY();
            xEnd = evt.getX();
            yEnd = evt.getY();
            //There is being used the method continueDrawing for completing the draw in between start-end
            (eraserContainer.get(eraserCount-1)).continueDrawing(xStart, yStart, xEnd, yEnd, g2);
        } else if(lineClicked) {
            xEnd = evt.getX();
            yEnd = evt.getY();
            //There is being used the method continueDrawing for completing the draw in between start-end
            (lineContainer.get(lineCount-1)).continueDrawing(xStart, yStart, xEnd, yEnd, g2);
        }else if (circleClicked) {
            //The x,y location is being obtained, when the user stops clicking 
            //The substraction is done to get the another coordenates next to the start point
            xEnd = evt.getX() - xStart;
            yEnd = evt.getY() - yStart;
            //There is being used the method continueDrawing for completing the draw in between start-end
            (circContainer.get(circleCount-1)).continueDrawing(xStart, yStart, xEnd, yEnd, g2);

        }else if (squareClicked) {
            //The x,y location is being obtained, when the user stops clicking 
            //The substraction is done to get the another coordenates next to the start point
            xEnd = evt.getX() - xStart;
            yEnd = evt.getY() - yStart;
            //There is being used the method continueDrawing for completing the draw in between start-end
            (sqrContainer.get(sqrCount-1)).continueDrawing(xStart, yStart, xEnd, yEnd, g2);
        }
        //Depending on the condition and what's saved on toolContainer. The objects on tool container are drawed
        for (int i = 0; i < toolContainer.size(); i++) {
            (toolContainer.get(i)).drawAll(g2);
        }

    }//GEN-LAST:event_canvasMouseDragged

    private void chooseColorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseColorButtonActionPerformed
        // Here it's being created a JColorChooser object
        JColorChooser colorescogido = new JColorChooser();
        //Here it's being assigned to a Color object a dialog window
        color = colorescogido.showDialog (null,"Seleccione color",Color.GRAY);
        //Setting with the color chose, a button background
        actualColorButton.setBackground(color);

    }//GEN-LAST:event_chooseColorButtonActionPerformed

    private void eraserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eraserButtonActionPerformed
        // Here are the actual boolean states when the user press the eraserButton
        penClicked = false;
        eraserClicked = true;
        lineClicked = false;
        circleClicked = false;
        squareClicked = false;

    }//GEN-LAST:event_eraserButtonActionPerformed

    private void penButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_penButtonActionPerformed
        // Here are the actual boolean states when the user press the penButton
        penClicked = true;
        eraserClicked = false;
        lineClicked = false;
        circleClicked = false;
        squareClicked = false;

    }//GEN-LAST:event_penButtonActionPerformed

    private void lineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lineButtonActionPerformed
    }//GEN-LAST:event_lineButtonActionPerformed

    private void lineButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lineButtonMouseClicked
      // Here are the actual boolean states when the user press the lineButton
        penClicked = false;
        eraserClicked = false;
        lineClicked = true;
        circleClicked = false;
        squareClicked = false;
    }//GEN-LAST:event_lineButtonMouseClicked

    private void resettButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resettButtonMouseClicked
       // Here are the actual boolean states when the user press the resetButton
        sqrContainer.clear();
        circContainer.clear();
        lineContainer.clear();
        penContainer.clear();
        eraserContainer.clear();
        toolContainer.clear();
        canvas.update(g2);
        
        //There is being added an object of each type of container, except the tool one
        circContainer.add(new Circle());
        sqrContainer.add(new Square());
        lineContainer.add(new Line());
        penContainer.add(new Pen());
        eraserContainer.add(new Eraser());
        //There is being re-assigned the values of the counters
        circleCount = 0;
        sqrCount = 0;
        lineCount = 0;
        penCount = 0;
        eraserCount= 0;
    
        
    }//GEN-LAST:event_resettButtonMouseClicked

    private void circleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_circleButtonActionPerformed
         // Here are the actual boolean states when the user press the circleButton
        penClicked = false;
        eraserClicked = false;
        lineClicked = false;
        circleClicked = true;
        squareClicked = false;
    }//GEN-LAST:event_circleButtonActionPerformed

    private void squareButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_squareButtonActionPerformed
         // Here are the actual boolean states when the user press the squareButton
        penClicked = false;
        eraserClicked = false;
        lineClicked = false;
        circleClicked = false;
        squareClicked = true;

    }//GEN-LAST:event_squareButtonActionPerformed

    
    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed
        //JFileChooser object is being created
        JFileChooser fileChoose= new JFileChooser();
        //open a JFileChooseron a dialog panel
        fileChoose.showOpenDialog(this);
        //setting on format the file chose
        File file = fileChoose.getSelectedFile();
       //try-catch due to the possible errors 
        try {
            //setting the file on format to image
            image = ImageIO.read(file);
            //System.out.println(file.getPath());
            //System.out.println(file.getName());
        } catch (IOException ex) {
            Logger.getLogger(GUIPaint.class.getName()).log(Level.SEVERE, null, ex);
        }
       //adding the image to an imageIcon, while its created
        ImageIcon icon = new ImageIcon(image);
        //setting the image on a scale of the canvas, in case it's too big
        Image imageReal= image.getScaledInstance(imageProof.getWidth(),imageProof.getHeight(), Image.SCALE_SMOOTH);
        //setting the image on the jlabel
        imageProof.setIcon(icon);
        
        //the arraylists are using the clear method, to erase every line
        sqrContainer.clear();
        circContainer.clear();
        lineContainer.clear();
        penContainer.clear();
        eraserContainer.clear();
        toolContainer.clear();
        //observer updating data
        canvas.update(g2);
        //Adding new objects from each element container(arraylist), except the tool one
        circContainer.add(new Circle());
        sqrContainer.add(new Square());
        lineContainer.add(new Line());
        penContainer.add(new Pen());
        eraserContainer.add(new Eraser());
        //re-assigning values to casting
        circleCount = 0;
        sqrCount = 0;
        lineCount = 0;
        penCount = 0;
        eraserCount= 0;
    }//GEN-LAST:event_newButtonActionPerformed

    private void openProjectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_openProjectMouseClicked
        // name att it's being initiallized
        String name;
        //setting a jOptionPanel for the user to write the file's name/ saving the text on name att
        name = JOptionPane.showInputDialog("Type your file's name");
        //setting on format
        JOptionPane.showMessageDialog(null, "Your will open the next file " + name + ".ser");
        // creating a FileReaderSer object
        FileReaderSer file = new FileReaderSer();
        //creating a ImageIcon object and serializing the icon
        ImageIcon icon = file.readIconSerialization(name); 
        //creating a ToolContainer object and serializing tool
        ToolContainer tools = file.readToolSerialization(name);
        //Tells the user if the file does not exist
        if(icon == null) {
            JOptionPane.showMessageDialog(null, "The previously typed file does not exist");
        } else {
            //clearing the panel
            sqrContainer.clear();
            circContainer.clear();
            lineContainer.clear();
            penContainer.clear();
            eraserContainer.clear();
            toolContainer.clear();
            canvas.update(g2);
            //Adding new objects from each element container(arraylist), except the tool one
            circContainer.add(new Circle());
            sqrContainer.add(new Square());
            lineContainer.add(new Line());
            penContainer.add(new Pen());
            eraserContainer.add(new Eraser());
            //re-assigning values to casting
            circleCount = 0;
            sqrCount = 0;
            lineCount = 0;
            penCount = 0;
            eraserCount= 0;
            imageProof.setIcon(icon);
            toolContainer = tools.getTools();
        
            //Depending on the condition and what's saved on toolContainer. The objects on tool container are drawed
             for (int i = 0; i < toolContainer.size(); i++) {
                (toolContainer.get(i)).drawAll(g2);
            }
        }
        
        
        
        
        
    }//GEN-LAST:event_openProjectMouseClicked

    private void saveButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveButtonMouseClicked
        // name att it's being initiallized
        String name;
         //setting a jOptionPanel for the user to write the file's name/ saving the text on name att
        name = JOptionPane.showInputDialog("Type your file's name. Please don not add any extension");
        //confirmation for the user
        JOptionPane.showMessageDialog(null, "Your file was saved as: " + name);
        //creating a fileWriter object
        fileWriter file = new fileWriter();
        //creating a ToolContainer object
        ToolContainer tools = new ToolContainer();
        //Adding objects to tools from toolContainer
        for(int i = 0; i<toolContainer.size(); i++) {
            tools.addTool(toolContainer.get(i));
        }
        //serializing
        file.writeSerialization(name, tools, (ImageIcon)imageProof.getIcon());
    }//GEN-LAST:event_saveButtonMouseClicked

    
    /**
     * @param args the command line arguments
     */
    //the main method
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUIPaint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUIPaint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUIPaint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUIPaint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
           
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            //overrinding the run method
            public void run() {
                //new GUIPaint object and setting it visible
                new GUIPaint().setVisible(true);
            }
        });       
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BackgroundLabel;
    private javax.swing.JPanel ToolsPanel;
    private javax.swing.JButton actualColorButton;
    private javax.swing.JPanel canvas;
    private javax.swing.JButton chooseColorButton;
    private javax.swing.JButton circleButton;
    private javax.swing.JButton eraserButton;
    private javax.swing.JLabel imageProof;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton lineButton;
    private javax.swing.JButton newButton;
    private javax.swing.JButton openProject;
    private javax.swing.JButton penButton;
    private javax.swing.JButton resettButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton squareButton;
    // End of variables declaration//GEN-END:variables
}
